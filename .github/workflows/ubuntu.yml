name: Ubuntu

on:
  pull_request:
    types: [synchronize, opened]
  push:
    branches:
      - main

env:
  OPENCV_VERSION: "5.x"
  OPENCV_CACHE_VERSION: 1
  DEBIAN_FRONTEND: noninteractive

jobs:
  build:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout OpenCvSharp
        uses: actions/checkout@v3
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          sudo apt-get update -y
          sudo apt-get install -y --no-install-recommends \
            g++ \
            make \
            cmake \
            libtbb-dev \
            libatlas-base-dev

      - name: Cache OpenCV binaries
        id: cache_opencv
        uses: actions/cache@v3
        with:
          path: ${{ github.workspace }}/opencv_artifacts
          key: opencv-${{ env.OPENCV_VERSION }}-rev-${{ env.OPENCV_CACHE_VERSION }}

      - name: Build OpenCV
        if: steps.cache_opencv.outputs.cache-hit != 'true'
        run: |
          cd ${{github.workspace}}/cpp/opencv
          cmake \
            -S . \
            -B build \
            -D CMAKE_BUILD_TYPE=Release \
            -D BUILD_SHARED_LIBS=OFF \
            -D ENABLE_CXX11=ON \
            -D BUILD_EXAMPLES=OFF \
            -D BUILD_DOCS=OFF \
            -D BUILD_PERF_TESTS=OFF \
            -D BUILD_TESTS=OFF \
            -D BUILD_JAVA=OFF \
            -D BUILD_opencv_apps=OFF \
            -D BUILD_LIST=core,imgproc,imgcodecs \
            -D WITH_GSTREAMER=OFF \
            -D WITH_ADE=OFF \
            -D BUILD_WEBP=ON \
            -D WITH_WEBP=ON \
            -D WITH_PROTOBUF=OFF \
            -D WITH_QUIRC=OFF \
            -D OPENCV_ENABLE_NONFREE=ON \
            -D CMAKE_INSTALL_PREFIX=${GITHUB_WORKSPACE}/opencv_artifacts
          cd build
          make -j2
          make install
          sudo ldconfig

      - name: Build OpenCvSharpExtern
        run: |
          cd ${{github.workspace}}/cpp
          cmake -S . -B build \
            -D CMAKE_BUILD_TYPE=Release \
            -D CMAKE_PREFIX_PATH=${GITHUB_WORKSPACE}/opencv_artifacts
          cmake --build build -- -j2
          echo "--- ls ${{github.workspace}}/cpp/build/ ---"
          ls build
          sudo cp ${{github.workspace}}/cpp/build/libOpenCvSharpExtern.so /usr/lib

      - name: Test OpenCvSharpExtern
        working-directory: ${{github.workspace}}/cpp/build
        run: ctest

      - name: Test Managed Library
        working-directory: ${{github.workspace}}/cs/
        run: |
          dotnet test OpenCvSharp5.Tests/OpenCvSharp5.Tests.csproj \
            --configuration Release \
            --logger:"console;verbosity=detailed" \
            --collect:"XPlat Code Coverage" \
            -p:CoverletOutput=TestResults/ \
            -p:CoverletOutputFormat="cobertura,opencover"
          ls 
          echo "---"
          ls TestResults/
          cp $(find . -name "coverage.cobertura.xml") .
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:"coverage.cobertura.xml" -targetdir:"report" -reporttypes:"Html;MarkdownSummary"

      - name: Store Code Coverage Report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: ${{github.workspace}}/cs/report/ 

      - name: Code Coverage Report
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: ${{github.workspace}}/cs/coverage.cobertura.xml
          badge: true
          fail_below_min: true
          format: markdown
          hide_branch_rate: false
          hide_complexity: false
          indicators: true
          output: both
          thresholds: '60 80'
          
      - name: Add Coverage PR Comment
        uses: marocchino/sticky-pull-request-comment@v2
        if: github.event_name == 'pull_request'
        with:
          recreate: true
          path: code-coverage-results.md
